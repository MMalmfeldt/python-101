Python Style

-snake case for initializing or defining a function or variable
    -ex snake_case

Pascal Case for declaring a class name
    -capitalize every word and no spaces

In Python, you start a block with : and then indent and the block ends when you outdent again

pip install and pip uninstall

pip is just going out and grabbing shit fro PyPl

using the print() method to debug is a useful tool and especially good on the assessments because they use coderpad

can use scientific notation when writing a long float in Python
    syntax: 4e+20

f strings are how you do string interpolation in Python
    print(f'fuck you, {name}')

,__name__ returns the name of the data type

can use type with the is operator like this:
    print(type('abc').__name__)   # str

An expression combines values, variables, operators, and calls to functions to produce a new object. Expressions must be evaluated to determine the expression's value.

A statement, on the other hand, is an instruction that tells Python to perform an action of some kind. Unlike expressions, statements don't return values.

'log' is often used as a synonym for printing or showing something on the screen

naming conventions for most identifiers in Python
    snake_case

or for constants
    SCREAMING_SNAKE_CASE

PascalCase for naming class names

This example  
    first, last = ['Mary', 'Wonder']
    creates 2 variables, first and last and assigns the strings Mary and Wonder to them respectively


bar = {1, 2, 3}     # bar is {1, 2, 3}
bar |= {2, 3, 4, 5} # | performs set union
                    # bar is now {1, 2, 3, 4, 5}
bar -= {2, 4}       # - performs set difference
                    # bar is now {1, 3, 5}
print(bar)          # prints {1, 3, 5}

print('a','b','c','d', sep='') the 'sep'component of this determines what to use to separate the different items

similar to the 'sep' keyword, end= determines what to do after the last item, default is a newline

with the input method() you can pass a string as an argument and have that be your prompt for the input like this:
    name = input("What's your name? ")

some out of the box methods
    min() # min in a set
    max() # max in a set
    ord() # returns an integer that represents the Unicode point of that character
    chr() # kind of the inverse of ord
    any() # returns true if any element in a collection is truthy
    all() # returns true if all elements truthy, false otherwise
    id() # returns an integer that serves as the object's identity

In Python identifiers have function scope, can't be accessed outside the function 
    so do 
        constants, function, parameter, class and module names
            method names slightly different

functions that always return a boolean value are called predicates

methods work with specific objects, all methods are functions, but not all functions are methods



Flow control

'pass' If you want to use an if statement and one of the branches you just want to skip if it is that one you can use this

Logical operators

'not' #only takes one operand that appears to the right of the operator

Example of the match / case syntax (similar to case statement in Ruby)

value = 5

match value:
    case 1 | 2 | 3 | 4:
        print('value is < 5')
    case 5 | 6:
        print('value is 5 or 6')
    case _: # default case
        print('value is not 1, 2, 3, 4, 5, or 6')
# value is 5 or 6

Ternary Expressions in Python have following Syntax:
    value1 if condition else value2 



What are sets?
    Sets are types that mantain an unordered collection of unique objects, which are also called members.


Range constructor
    range(start, stop, step)
        generates a sequence of integers between start and stop-1 with an increment of step

Constructors for lists, tuples, sets, and frozensets
    list() or list(iterable)
    tuple() or tuple(iterable)
    set() or set(iterable)
    frozenset() or frozenset(iterable)

    can use these constructors to duplicate a collection like this:
        my_list = [5, 12, 2]
        another_list = list(my_list)

remember that nested collections create shallow copies

Slicing can extract or modify consecutive elements simultaneously
    sequence of seq[start:stop]
        retrieves the elements from sequence whose index is between start and stop
    
min() and max() return the minimum and maximum members in an iterable collection

sum() computes and returns the sum of all the collections numbers

index() returns the index of the first element in the seqence that matches the given element, throws an error of none

count() returns the number of times a value occurs in the seqence

index() gives the index position of the first matching substring of the string

zip() iterates through 0 or more iterables in parallel and returns a list of tuples with elements of each index of the iterables combined into same tuple

There are three methods to get lists of the keys, values, and key/value pairs from dictionaries
    keys()
    values()
    items()

append() # appends an element to a mutable sequence such as a list
insert() # inserts an object into a mutable sequence efore the element at A given index
extend() # appends the contents of an iterable sequence to the calling iterable sequence
remove() # searches a sequence for a specific object and renews it
pop() # removes and returns an indexed element from a mutable sequence
clear() # removes all elements of a sequence, leaving it empty

sorted() # create a sorted list from any iterable collection, mutable or immutable

reversed() # can use to reverse the order of elements in a sequence or dictionary


Some useful string methods:

str.swapcase() # obvious
str.isalpha() # returns True if all characters of str are alphabetic
str.isdigit() # returns True if all chars are numbers
str.isalnum() # returns True if all chars are alpha-numeric
str.islower() # returns True if all cased characters in str are whitespace characters, 
str.isspace() # returns True if all chars are whitespace chars
str.strip() # strips away leading and trailing items in a string, argument string passed in is what it will remove from both ends or whitespace if none
str.lstrip() # same but juste leading
str.rstrip() # same but just trailing
str.split() # returns a list of the words in a string, defaulting to separate with the whitespace
    -can pass in an argument to tell Python what to use as delimiter
str.splitlines() # splits a string into different lines based on where python ascertains a new line should be
str.join() # concatenates all strings in an iterable collection into a loan single string
str.find() # searches through the string looking for the first occurence of the argument that could be found
str.rfind() # same thing but goes right to left
    both are case sensitive

Use the keyword 'in' to check is something in a list

LOOPS AND ITERATING

While loops, nothing much to syntax

For loops   
    for element in collection:

This is an example of a nested loop

deck = []
for suit in suits:
    for rank in ranks:
        card = f'{rank} of {suit}'
        deck.append(card)
for these nested for Loops, the you go in order top to bottom for one iteration, and then you finish the lower level loop in it's entirety for that element of the top loop
    though possible, ill advised to nest loops 3 deep

'continue' keyword starts a new loop iteration
'break' keyword terminates the loop early

while true:

    break

above syntax useful for looping until something happens

List Comprehensions # take an iterable collection and create a new list through iteration and optional selection
    [ expression for element in iterable if condition ]

If an expression in a comprehension performs a transformation it is called a transformation

Syntax for Dictionary Comprehensions
{ key: value for element in iterable if condition }

Set Comprehension
{ expression for element in iterable if condition }

if a variable points to a mutable object and you do something to mutate the object, the object changes not the variable 

Example of better formatting for multiple methods chained together
    letters = 'abcdefghijklmnoqrstuvwxyz'

    # Note that the parentheses surrounding this
    # multi-line chain are required.
    consonants = (letters.replace('a', '').
                        replace('e', '').
                        replace('i', '').
                        replace('o', '').
                        replace('u', ''))
    print(consonants)    # bcdfghjklmnqrstvwxyz

using code from other Python files in your program by loading 'modules' which is what those are

Basic example of how importing modules works
    import math

    print(math.sqrt(math.pi))   # 1.7724538509055159

to avoid having to write math in front of all those methods, we can specifically import the methods we want like this:
    from math import pi, sqrt

    print(sqrt(pi))             # 1.7724538509055159

or you can use an alias for the name of the module like this:
    import math as m

    print(m.sqrt(m.pi))         # 1.7724538509055159

to override Python's desire to assume inner variables with the same name as outer scoped variables are supposed to be referencing different items can prepend with 'global' for nonlocal, you just go to the next one up

I'm not 100% sure of this, but it appears that you need an explicit return statement to return anything in Python


syntax for str.format() method:
def cite(author, quote):
    print('{} said: "{}"'.format(author, quote))

str.casefold() is a way to compare strings in a case insensitive manner.

syntax for deleting a value at key: 'mileage'
    del car['mileage']




